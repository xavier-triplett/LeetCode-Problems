104. Maximum Depth of Binary Tree

Question:

Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7



Solution:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
        int maxDep = 0;
        if (root != NULL) {
            getHeight(root, 0, maxDep);
        }
        return maxDep;
    }
    
    void getHeight(TreeNode* node, int currentDep, int& maxDep) {
        if (node == NULL) maxDep = max(maxDep, currentDep);
        else {
            getHeight(node->left, currentDep + 1, maxDep);
            getHeight(node->right, currentDep + 1, maxDep);
        }
    }
};