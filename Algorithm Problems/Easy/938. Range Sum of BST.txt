938. Range Sum of BST

Question:

Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).

The binary search tree is guaranteed to have unique values.

 

Example 1:

Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
Output: 32
Example 2:

Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
Output: 23
 

Note:

The number of nodes in the tree is at most 10000.
The final answer is guaranteed to be less than 2^31.



Solution:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int rangeSumBST(TreeNode* root, int L, int R) {
        int result = 0;
        if (root != NULL) {
            getSum(root, L, R, result);
        }
        return result;
    }
    
    void getSum(TreeNode* node, int& L, int& R, int& result) {
        if (node != NULL) {
            if (node->val >= L && node->val <= R) result += node->val;
            getSum(node->left, L, R, result);
            getSum(node->right, L, R, result);
        }
    }
};